#!/usr/bin/env python3

# Copyright (c) 2020, Ericson Joseph
# 
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
# 
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright notice,
#       this list of conditions and the following disclaimer in the documentation
#       and/or other materials provided with the distribution.
#     * Neither the name of pyMakeTool nor the names of its contributors
#       may be used to endorse or promote products derived from this software
#       without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import tempfile
import subprocess
from pymakelib import Pymaketool
from pymakelib import prelib as plib

p = Pymaketool()

print(p.getModulesPaths())

modules = p.readModules(p.getModulesPaths())

lincs = ''
allincs = []
# allincs.extend(p.compilerSettings['INCLUDES'])

allsrcs = []

for m in modules:
    incs = [str(i) for i in m.incs]
    allincs.extend(incs)
    srcs = [str(s) for s in m.srcs]
    allsrcs.extend(srcs)
    
# allsrcs = list(dict.fromkeys(allsrcs))

# includes = ','.join(allincs)
# srcs = ','.join(allsrcs)

# print(f"./cinclude2dot --include={includes} --src={srcs}")
## Use gcc -H -D__TEST_DEFINE__=1 -I/PROJECTS/PYTHON/test_module_lib/module_lib/inc -Ilib/inc app/application/main.c

gccCmd = ['echo', '|']
gccCmd.append(p.compilerSettings['CC'])
gccCmd.append('-H')
gccCmd.append(plib.macrosDictToString(p.compilerOpts['MACROS']))
for inc in allincs:
    gccCmd.append(f"-I{inc}")

gccCmd.append('-o')
tmpout = tempfile.NamedTemporaryFile()
gccCmd.append(tmpout.name)
gccCmd.append('-c')
gccCmd.append('&>')
tmpfile = tempfile.NamedTemporaryFile()
gccCmd.append(tmpfile.name)
gccCmd.append(';')
gccCmd.append('cat')
gccCmd.append(tmpfile.name)
gccCmd.append('|')
gccCmd.append('grep')
gccCmd.append('-e')
gccCmd.append("'^. '")

for src in allsrcs:
    print(src)
    gccCmd.insert(12, src)
    stcmd = ' '.join(gccCmd)
    try:
        out = subprocess.check_output(['bash', '-c', stcmd])
        for line in out.splitlines():
            line = line.decode('utf-8')
            line = line[2:]
            print(f"\t{line}")
    except Exception as e:
        print(e)
    gccCmd.pop(12)
